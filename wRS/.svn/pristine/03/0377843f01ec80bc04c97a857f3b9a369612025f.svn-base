package roadshop.web.board.dao;

import static roadshop.db.jdbcUtil.*;

import javax.naming.InitialContext;
import javax.sql.DataSource;
import javax.naming.Context;

import roadshop.web.board.vo.BoardInfo;
import roadshop.web.member.vo.MemberInfo;

import java.io.*;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

public class BoardDAO {
	Connection con;
	public static BoardDAO boardDAO = null;

	public BoardDAO(Connection con) {
		this.con=con;
	}
	
	
	//1개의 record(article)를 삽입하는 Method
	//이 것에는 ref, re_step, re_level, insertCount,number등이 있음!!
	//생성된 글이 원글인지 답글인지에 대해서 넣어주는 것임!!
	public int insertArticle(BoardInfo article){
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		int b_num = article.getB_num();		//글의 b_num을 의미함!!
		int ref = article.getRef();
		int re_step = article.getRe_step();
		int re_level = article.getRe_level();
		
		int insertCount=0;

		int number = 0;		//이전에 생성된 글의 갯수를 알아내는 변수(local)
		String sql = "";
		try{
			pstmt = con.prepareStatement("SELECT MAX(b_num) FROM board");
			//board테이블에서 b_num(column)의 최대 값을 출력함!!!
			//만약 table이 null일 경우 0을 출력함!!
			rs = pstmt.executeQuery();

			if(rs.next()){
				//현재 작성된 글이 하나라도 존재하면...
				//number변수에 값을 넣음!
				System.out.println("현재 작성된 글의 갯수"+rs.getInt(1)+"\n");
				number = rs.getInt(1) + 1;
				//현재 글 갯수의 최대값에 1을 더했으므로 값이 절대 중복되지 않는다.
			}
			else{
				number = 1;
			}
			//여기까지는 해당 글이 있으면 number에 최고 번호를 주고
			//해당 글이 생성된 것이 없으면 number=1을 넣음!!

			if(article.getB_num() != 0){
				//b_num은 db에 저장 되어 있는 글 번호!!(primaryKey)
				//이 곳은 같은 글 그룹에 대한 글이 들어오면 re_step을 키워서 
				//가장 글을 출력할때 가장 아래에 놓는다!!
				//결국 저장된 글이 존재한다면!!ref,re_step,re_level을 처리함
				//답변글에 대한 sql을 실행!!
				sql =  "UPDATE board SET re_step = re_step + 1 "
						+ "WHERE ref = ? AND re_step > ?";
				pstmt = con.prepareStatement(sql);
				pstmt.setInt(1, ref);
				pstmt.setInt(2, re_step);
				pstmt.executeUpdate();
				re_step = re_step + 1;
				re_level = re_level + 1;
			}else{
				//작성한 글이 원글에 대한 ref,re_step,re_level을 처리함
				ref = number;
				re_step = 0;
				re_level = 0;
			}
			//지금까지는 해당 글이 원글인지 아니면 댓글인지에 따라서 ref, re_step, re_level을 설정해 줌!!

			//지금부터는 테이블에 INSERT 처리를 하면 됨
			sql = "INSERT INTO board(b_num, " +
					"b_writer, " +
					"b_subject, " +
					"b_image," +
					"b_content, " +
					"b_reg_date, " +
					"ref, " +
					"re_step, " +
					"re_level," +
					"i_id, " +
					"m_id" +
					") "
					+ "VALUES(board_seq.nextval," +
					"?,?,?,?,?,?,?,?,?,?)";
				
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, article.getB_writer());
			pstmt.setString(2, article.getB_subject());
			pstmt.setString(3, article.getB_image());
			pstmt.setString(4, article.getB_content());
			pstmt.setTimestamp(5, article.getB_reg_date());
			pstmt.setInt(6, ref);
			pstmt.setInt(7, re_step);
			pstmt.setInt(8, re_level);
			pstmt.setString(9, article.getI_id());
			pstmt.setString(10, article.getM_id());
			
			insertCount=pstmt.executeUpdate();
			//이 곳에서 변경된 값들을 디비에 삽입함!!	
//			System.out.println("BoardDAO.insertArticle(article)\n삽입후 값들" +
//					"b_num="+b_num+", ref="+ref+", re_step="+re_step+", re_level="+ re_level
//					+", m_id="+ m_id+", i_id="+ article.getI_id()+", b_image="+ article.getB_image());
//			
			//pstmt.executeUpdate();
			//SELECT 문장 이외의 sql문장을 실행 한 후 적용된 행 수를 int형으로 리턴.
			//1행이 업데이트됐으면 1 , 2행이 업데이트 됐으면 2
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			close(rs);
			close(pstmt);
		}
		return insertCount;
	}

	//전체 레코드(기사)의 개 수를 리턴하는 메소드
	public int selectArticleCount(){
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int x = 0;
		try{
			pstmt = con.prepareStatement("SELECT COUNT(*) FROM board");
			rs = pstmt.executeQuery();
			
			if(rs.next()){
				x = rs.getInt(1);
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			close(rs);
			close(pstmt);
		}
		return x;
	}

	//특정 페이지에 출력될 글목록 들을 반환하는 메소드
	public List<BoardInfo> selectArticleList(int start, int pageSize){
		//start : 시작 레코드 번호(글번호!!) ==>b_num
		//pageSize : 한 페이지에 출력되는 글의 개수
		System.out.println("DAO.selectArticleList(int start, int pageSize)입니다.");
		System.out.println("이 곳에서는 DAO에 있는selectArticleList()입니다\n" +
				"이 곳에서는 특정 페이지에 출력될 글목록 들을 반환합니다.\n" +
				"DB에 연결을 해서 값들을 갖고 온다!");
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<BoardInfo> articleList = null;
		String sql = null;
		try{
			sql = "SELECT * FROM board ORDER BY b_reg_date asc";
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			sql = "SELECT list2.* FROM "
					+ "(SELECT rownum r, list1.* FROM "
					+ "(SELECT * FROM board ORDER BY ref DESC, re_step ASC, b_reg_date desc) list1) "
					+ "list2 WHERE r between ? AND ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, start);
			pstmt.setInt(2, start + pageSize-1);
			rs = pstmt.executeQuery();
			
			if(rs.next()){
				articleList = new ArrayList<BoardInfo>();
				do{
					BoardInfo article = new BoardInfo();
					article.setB_num(rs.getInt("b_num"));
					article.setB_writer(rs.getString("b_writer"));
					article.setB_subject(rs.getString("b_subject"));
					article.setB_image(rs.getString("b_image"));
					article.setI_id(rs.getString("i_id"));
					article.setM_id(rs.getString("m_id"));
					article.setB_reg_date(rs.getTimestamp("b_reg_date"));
					article.setReadcount(rs.getInt("readcount"));
					article.setRef(rs.getInt("ref"));
					article.setRe_step(rs.getInt("re_step"));
					article.setRe_level(rs.getInt("re_level"));
					article.setB_content(rs.getString("b_content"));
					articleList.add(article);
					}while(rs.next());
				}
			}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			close(rs);
			close(pstmt);
		}
		return articleList;		//articleList들은 모든 글에 대한 정보를 갖고 있음!!		
	}
	//글 내용 보기
	//이 곳은 record번호(num = b_num)를 받아서 
	//record를 받는 기능, 해당 article의 조회수(readcount)를 1올리는 기능을 담당!! 
	public BoardInfo selectArticle(int num){
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		BoardInfo article=null;
		try{
			//readcount(조회수)를 증가시키는 부분!!
			pstmt=con.prepareStatement("UPDATE board SET readcount=readcount+1 WHERE b_num=?" );
			pstmt.setInt(1, num);
			int count=pstmt.executeUpdate();
			//해당 실행문을 통해서 조회수를 증가킴!
			
			if(count>0){
				//수행문이 제대로 수행 되었으면!!!
				//DB문을 실행하라!!
				commit(con);
			}
			//article(record)에 대한 모든 속성들을 갖고오는 부분!!
			pstmt=con.prepareStatement("SELECT*FROM board WHERE b_num=?");
			pstmt.setInt(1, num);
			rs=pstmt.executeQuery();		
			//query구문이 실행될 수 있는 구문을 형성해줌!!

			while(rs.next()){
				article = new BoardInfo();
				article.setB_num(rs.getInt("b_num"));
				article.setB_writer(rs.getString("b_writer"));
				article.setB_subject(rs.getString("b_subject"));
				article.setB_reg_date(rs.getTimestamp("b_reg_date"));
				article.setReadcount(rs.getInt("readcount"));
				article.setRef(rs.getInt("ref"));
				article.setRe_step(rs.getInt("re_step"));					
				article.setRe_level(rs.getInt("re_level"));
				article.setB_content(rs.getString("b_content"));
				article.setB_image(rs.getString("b_image"));
				article.setM_id(rs.getString("m_id"));
				article.setI_id(rs.getString("i_id"));				
				System.out.println("\n삽입후 값들 b_num = "+rs.getInt("b_num")+",b_writer = "+rs.getString("b_writer")+", b_subject = "
				+rs.getString("b_subject")+", b_reg_date = " + rs.getTimestamp("b_reg_date")+",readcount="+rs.getInt("readcount")+"\n" +
						", ref = "+rs.getInt("ref") + ", re_step = "+rs.getInt("re_step")+", re_level = "+rs.getInt("re_level")+"\n"
						+", b_image = "+rs.getString("b_image") );
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			close(rs);
			close(pstmt);
		}
		return article;
	}

	//수정하기 위한 글 불러오기
	//해당글(article) 1개를 갖고오는 기능!!
	//해당 컬럼에 맞게 바꿔줌!!
	public BoardInfo selectUpdateArticle(int num){
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		BoardInfo article=null;
		
		System.out.println("DAO.selectUpdateArticle(int num)입니다.");
		try{
			//readcount(조회수)를 증가시키는 부분!!
			//article(record)에 대한 모든 속성들을 갖고오는 부분!!
			pstmt=con.prepareStatement("SELECT*FROM board WHERE b_num=?");
			pstmt.setInt(1, num);
			rs=pstmt.executeQuery();		
			//query구문이 실행될 수 있는 구문을 형성해줌!!
			//지금까지는 해당 글을 불러옴!!!
			
			if(rs.next()){			
				article = new BoardInfo();
				article.setB_num(rs.getInt("b_num"));
				article.setB_writer(rs.getString("b_writer"));
				article.setB_subject(rs.getString("b_subject"));
				article.setB_reg_date(rs.getTimestamp("b_reg_date"));
				article.setReadcount(rs.getInt("readcount"));
				article.setRef(rs.getInt("ref"));
				article.setRe_step(rs.getInt("re_step"));					
				article.setRe_level(rs.getInt("re_level"));
				article.setB_content(rs.getString("b_content"));
				article.setB_image(rs.getString("b_image"));
				article.setM_id(rs.getString("m_id"));
				article.setI_id(rs.getString("i_id"));
			}
			System.out.println("\n삽입후 값들 b_num = "+article.getB_num()+",b_writer = "+article.getB_writer()+", b_subject = "
					+article.getB_subject()+", b_reg_date = " + article.getB_reg_date()+",readcount="+article.getReadcount()+"\n" +
							", ref = "+article.getRef() + ", re_step = "+article.getRe_step());
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			close(rs);
			close(pstmt);
		}
		return article;
	}

	//이 함수는 int x를 리턴하며 이 값이 >0일때는 이 함수를 실행하고 
	//그렇지 않을 때는 이 함수를 실행하지 않는다!!
	//이 함수는 작성자, 글제목,글냉용 을 바꾸는 부분을 담당한다
	//그리고 그 record를  num으로 찾음!!!!
	//한개의 글을 update해줌!!! 이 것으로 해당 내용이 바뀜
	//결과로는 x= 1이면 수정 완료, -1,0이면 수정되지 않음!!
	public int updateArticle(BoardInfo article){

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int x=-1;
		String sql="";

		try{
			sql = "SELECT b_num FROM board WHERE b_num=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, article.getB_num());
			//해당 글(record)의 b_num을 갖고옴!!
			rs=pstmt.executeQuery();	//query문을 생성 할 수 있는 구문을 만듬!
			
			if(rs.next()){
				//DB에 결과record가 존재한다면!!
				
				sql="UPDATE board SET " +
						"b_writer=?,"+
						"b_subject=?,"+
						"b_image=?," +
						"b_content=?," +
						"b_reg_date=?," +
						"readcount=?," +
						"ref=?," +
						"re_step=?," +
						"re_level=?," +
						"i_id=?," +
						"m_id=?" +
						" WHERE b_num=?";
				
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, article.getB_writer());
				pstmt.setString(2, article.getB_subject());
				pstmt.setString(3, article.getB_image());
				pstmt.setString(4, article.getB_content());
				pstmt.setTimestamp(5, article.getB_reg_date());
				pstmt.setInt(6, article.getReadcount());
				pstmt.setInt(7, article.getRef());
				pstmt.setInt(8, article.getRe_step());
				pstmt.setInt(9, article.getRe_level());
				pstmt.setString(10, article.getI_id());
				pstmt.setString(11, article.getM_id());

				pstmt.setInt(12, article.getB_num());
				x = pstmt.executeUpdate();
				System.out.println("이 곳은 DAO.updateArticle(article)의 결과값 x="+x);
			}else{	
				//DB에 결과record가 존재하지 않는다면!!
				x=0;
			}					
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			try{
				rs.close();
				pstmt.close();
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		return x;	
	}

	//삭제하기
	//이 함수는 int x를 리턴하며 이 값이 >0일때는 이 함수를 실행하고 
	//그렇지 않을 때는 이 함수를 실행하지 않는다!!
	public int deleteArticle(int num){
		//param num = record의 번호(b_num)!!
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int x=-1;
		String sql="";
		System.out.println("이 곳은 DAO.deleteArticle(int num) num ==" + num);
		try{			
			sql = "SELECT b_num FROM board WHERE b_num=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, num);		//num = param
			rs=pstmt.executeQuery();	//sql문을 실행
			System.out.println("값이 존재 하나?? 아직은....");
			if(rs.next()){
				System.out.println("값이 존재한다!!!");
				//실행된 Sql문이 존재한다면!!
				//딜리트 쿼리로 디비에서 삭제
				sql="DELETE board WHERE b_num=?";
				pstmt=con.prepareStatement(sql);
				pstmt.setInt(1, num);
				pstmt.executeUpdate();
				x=1;
				}
			else{	//실행된 Sql문이 존재하지 않는다면!!
				x=0;
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally
		{
			try{
				rs.close();
				pstmt.close();
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		System.out.println("x ==" + x);

		return x;
	}

	public BoardInfo selectFileUpdateArticle(int num) {
		// TODO Auto-generated method stub
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		BoardInfo article=null;
		
		System.out.println("DAO.selectFileUpdateArticle(int num)입니다.");
		try{
			//readcount(조회수)를 증가시키는 부분!!
			//article(record)에 대한 모든 속성들을 갖고오는 부분!!
			pstmt=con.prepareStatement("SELECT * FROM board WHERE b_num=?");
			pstmt.setInt(1, num);
			rs=pstmt.executeQuery();
			//query구문이 실행될 수 있는 구문을 형성해줌!!
			//지금까지는 해당 글을 불러옴!!!
			
			if(rs.next()){
				article = new BoardInfo();
				article.setB_num(rs.getInt("b_num"));
				article.setB_writer(rs.getString("b_writer"));
				article.setB_subject(rs.getString("b_subject"));
				article.setB_reg_date(rs.getTimestamp("b_reg_date"));
				article.setReadcount(rs.getInt("readcount"));
				article.setRef(rs.getInt("ref"));
				article.setRe_step(rs.getInt("re_step"));					
				article.setRe_level(rs.getInt("re_level"));
				article.setB_content(rs.getString("b_content"));
				article.setB_image(rs.getString("b_image"));
				article.setM_id(rs.getString("m_id"));
				article.setI_id(rs.getString("i_id"));
			}
			System.out.println("\n삽입후 값들 b_num = "+article.getB_num()+",b_writer = "+article.getB_writer()+", b_subject = "
					+article.getB_subject()+", b_reg_date = " + article.getB_reg_date()+",readcount="+article.getReadcount()+"\n" +
							", ref = "+article.getRef() + ", re_step = "+article.getRe_step());
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			close(rs);
			close(pstmt);
		}
		return article;
	}


	public int selectCategoryCount(String category, String keyword) {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int x = 0;
		String sql = null;
		System.out.println("이 곳은 DAO.selectCategoryCount()입니다.");
		if(category.equals("b_writer")){
			System.out.println("category = "+ category);
			sql = "SELECT COUNT(*) FROM board where b_writer LIKE '%"+keyword+"%'";
		}
		else if(category.equals("b_content")){
			sql = "SELECT COUNT(*) FROM board where b_content LIKE '%"+keyword+"%'";
			System.out.println("내용 변경부분");
		}
		else if(category.equals("b_subject")){
			sql = "SELECT COUNT(*) FROM board where b_subject LIKE '%"+keyword+"%'";
			System.out.println("제목 변경부분");
		}
		try {
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			if (rs.next()) {
				x = rs.getInt(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			close(rs);
			close(pstmt);
		}
		return x;
	}

	//해당 카테고리에 검색된 것을 갖고 온다!!
	public ArrayList<BoardInfo> selectCategorySearchList(String keyword,
			String category, int startRow, int pageSize) {
		// TODO Auto-generated method stub
		
		System.out.println("DAO.selectCategorySearchList()입니다 기능에 맞게 DB를 갖고옴");
		String sql="SELECT list2.* FROM "
				+ "(SELECT rownum r, list1.* FROM "
				+ "(SELECT * FROM board WHERE "+category+" LIKE '%"+keyword+"%' ORDER BY b_NUM) list1)"
				+ "list2 WHERE r between ? AND ?";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<BoardInfo> articleList = new ArrayList<BoardInfo>();
		
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, startRow);
			pstmt.setInt(2, startRow + pageSize - 1);

			rs = pstmt.executeQuery();

			while (rs.next()) {
				BoardInfo article = new BoardInfo();
				article.setB_num(rs.getInt("b_num"));
				article.setB_writer(rs.getString("b_writer"));
				article.setB_subject(rs.getString("b_subject"));
				article.setB_reg_date(rs.getTimestamp("b_reg_date"));
				article.setReadcount(rs.getInt("readcount"));
				article.setRef(rs.getInt("ref"));
				article.setRe_step(rs.getInt("re_step"));					
				article.setRe_level(rs.getInt("re_level"));
				article.setB_content(rs.getString("b_content"));
				article.setB_image(rs.getString("b_image"));
				article.setM_id(rs.getString("m_id"));
				article.setI_id(rs.getString("i_id"));
				
				articleList.add(article);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			close(rs);
			close(pstmt);
		}
		System.out.println("DAO.selectCategorySearchList()의 끝부분입니다." +
				"\n ");

		return articleList;
	}





//qefwqf새로 정의한 함수!!
	//매우 신경을 써야합니다!!!
}