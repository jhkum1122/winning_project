/*package roadshop.web.member.controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import roadshop.actionforward.ActionForward;
import roadshop.web.member.action.MemberAction;
import roadshop.web.member.action.MemberIdSearchAction;
import roadshop.web.member.action.MemberListAction;
import roadshop.web.member.action.MemberLoginAction;
import roadshop.web.member.action.MemberModifyAction;
import roadshop.web.member.action.MemberMyPageAction;
import roadshop.web.member.action.MemberRegistAction;
import roadshop.web.member.action.MemberRegistViewAction;
import roadshop.web.member.action.MemberRemoveAction;
import roadshop.web.member.action.MemberRemoveUserAction;
import roadshop.web.member.action.MemberRemoveViewAction;
import roadshop.web.member.action.MemberRuleAction;
import roadshop.web.member.action.MemberSelectModifyAction;
import roadshop.web.member.action.MemberZipSearchAction;

*//**
 * Servlet implementation class MemberFrontController
 *//*
@WebServlet("*.mem")
public class MemberFrontController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	*//**
	 * @see HttpServlet#HttpServlet()
	 *//*
	public MemberFrontController() {
		super();
		// TODO Auto-generated constructor stub
	}

	protected void doProcess(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {

		request.setCharacterEncoding("UTF-8");
		String requestURI = request.getRequestURI();
		String context = request.getContextPath();
		String command = requestURI.substring(context.length());

		MemberAction action = null;
		ActionForward forward = null;

		// 회원등록(가입)
		if (command.equals("/main/memberRegist.mem")) {
			action = new MemberRegistAction();
			try {
				forward = action.execute(request, response);

			} catch (Exception e) {
				e.printStackTrace();

			}

		}
		// 아이디 중복체크
		else if (command.equals("/main/memberIdSearch.mem")) {
			action = new MemberIdSearchAction();
			try {

				forward = action.execute(request, response);
			} catch (Exception e) {

				e.printStackTrace();
			}
			// 회원정보수정
		} else if (command.equals("/main/memberModify.mem")) {
			action = new MemberModifyAction();

			try {
				forward = action.execute(request, response);

			} catch (Exception e) {
				e.printStackTrace();

			}
			// 회원정보 수정을 할 때 회원값을 불러와서 값에 넘어주는 컨트롤러
		} else if (command.equals("/main/memberSelectModify.mem")) {
			action = new MemberSelectModifyAction();
			try {

				forward = action.execute(request, response);
			} catch (Exception e) {

				e.printStackTrace();
			}
			// 회원탈퇴
		} else if (command.equals("/main/memberRemove.mem")) {

			action = new MemberRemoveAction();

			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/main/memberZipSearch.mem")) {
			action = new MemberZipSearchAction();
			try {

				forward = action.execute(request, response);
			} catch (Exception e) {

				e.printStackTrace();
			}

		}
		// 회원정보수정 결과페이지로 넘겨주기
		else if (command.equals("/main/memberList.mem")) {

			action = new MemberListAction();

			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}

		} else if (command.equals("/main/memberZipSearch.mem")) {
			action = new MemberZipSearchAction();
			try {

				forward = action.execute(request, response);
			} catch (Exception e) {

				e.printStackTrace();
			}
			// 사용자 세션 아이디 가져오기~(로그인 유지)
		} else if (command.equals("/main/memberRemoveUser.mem")) {

			action = new MemberRemoveUserAction();
			try {

				forward = action.execute(request, response);
			} catch (Exception e) {

				e.printStackTrace();
			}

		} else if (command.equals("/main/memberRule.mem")) {

			action = new MemberRuleAction();
			try {

				forward = action.execute(request, response);
			} catch (Exception e) {

				e.printStackTrace();
			}

		} else if (command.equals("/main/memberRegistView.mem")) {

			action = new MemberRegistViewAction();
			try {

				forward = action.execute(request, response);
			} catch (Exception e) {

				e.printStackTrace();
			}

		} else if (command.equals("/member/login.mem")) {

			action = new MemberLoginAction();
			try {

				forward = action.execute(request, response);
			} catch (Exception e) {

				e.printStackTrace();
			}

		}else if (command.equals("/member/mypage.mem")) {

			action = new MemberMyPageAction();
			try {

				forward = action.execute(request, response);
			} catch (Exception e) {

				e.printStackTrace();
			}

		}else if (command.equals("/main/memberRemoveView.mem")) {

			action = new MemberRemoveViewAction();
			try {

				forward = action.execute(request, response);
			} catch (Exception e) {

				e.printStackTrace();
			}

		}


		if (forward != null) {
			if (forward.isRedirect()) {
				response.sendRedirect(forward.getUrl());
			} else {
				RequestDispatcher dispatcher = request
						.getRequestDispatcher(forward.getUrl());
				dispatcher.forward(request, response);
			}
		}
	}

	*//**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 *//*
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doProcess(request, response);
	}

	*//**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 *//*
	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doProcess(request, response);
	}

}
*/